# version: '3.8'
# services:
#   flask-app:
#     build:
#       context: ./backend  
#       dockerfile: Dockerfile  
#     ports:
#       - "5000:5000"  # Exposes app.py on port 5000
#       - "5001:5001"  # Exposes chat.py on port 5001
#     depends_on:
#       - db    # For app.py
#       - mongodb  # For chat.py
#       - redis  # For chat.py
#     environment:
#       MY_SECRET_KEY: asdvasbasd
#       DEPLOY_DATABASE_URL: postgresql+psycopg2://myuser:mypassword@db:5432/mydb
#     networks:

#       - app-network

#   db:
#     image: bitnami/postgresql:16.4.0
#     environment:
#       POSTGRES_USER: myuser
#       POSTGRES_PASSWORD: mypassword
#       POSTGRES_DB: mydb
#     ports:
#       - "5432:5432"
#     networks:
#       - app-network
#     volumes:
#       - db_data:/var/lib/postgresql/data  

#   mongodb:
#     image: mongo
#     ports:
#       - "27017:27017"
#     networks:
#       - app-network
#     volumes:
#       - mongo_data:/data/db  

#   redis:
#     image: redis:alpine
#     ports:
#       - "6379:6379"
#     networks:
#       - app-network
#     volumes:
#       - redis_data:/data  

#   # react-app:
#   #   build:
#   #     context: ./frontend
#   #     dockerfile: Dockerfile
#   #   ports:
#   #     - "3000:3000"
#   #   volumes:
#   #     - ./frontend/build:/frontend/build 
#   #   networks:
#   #     - app-network
#   #   depends_on:
#   #     - flask-app  # React waits for the Flask app to be ready

  
#   nginx:
#     build:
#       context: .  # Build context is the project root
#       dockerfile: Dockerfile.nginx  # Use the custom Nginx Dockerfile
#     ports:
#       - "80:80"
#     depends_on:
#       - flask-app
#     networks:
#       - app-network

# networks:
#   app-network:
#     driver: bridge  

# volumes:
#   db_data:  
#   mongo_data:  
#   redis_data:  





version: '3.8'
services:
  flask-app:
    image: bighammeraaazzz/myapp-backend
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      MY_SECRET_KEY: asdvasbasd
      DEPLOY_DATABASE_URL: postgresql+psycopg2://myuser:mypassword@db:5432/mydb
    networks:
      - app-network

  db:
    image: bitnami/postgresql:16.4.0
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - db_data:/var/lib/postgresql/data

  mongodb:
    image: mongo
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    ports:
      - "27017:27017"
    networks:
      - app-network
    volumes:
      - mongo_data:/data/db

  redis:
    image: redis:alpine
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis_data:/data

  nginx:
    image: bighammeraaazzz/myapp_nginx
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    ports:
      - "80:80"
    networks:
      - app-network

networks:
  app-network:
    driver: overlay

volumes:
  db_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local